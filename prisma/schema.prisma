generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                      String              @id @default(cuid()) @map("_id")
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  email                   String              @unique
  name                    String?
  image                   String?
  uploadedSongs           Song[]              @relation("uploadedSongs")
  playlists               Playlist[]
  searchHistory           SearchHistory[]
  accounts                Account[]
  sessions                Session[]
  verificationTokens      VerificationToken[]
  emailVerified           DateTime?
  PlayHistory             PlayHistory[]
  sideBarOpen             Boolean             @default(true)
  sideBarMoreDetailsShown Boolean             @default(false)
  sideBarWidth            Float?
}

model Playlist {
  id                 String         @id @default(cuid()) @map("_id")
  createdAt          DateTime       @default(now())
  title              String
  creator            User           @relation(fields: [creatorId], references: [id])
  creatorId          String
  image              String?
  description        String?
  isPublic           Boolean        @default(true)
  isFavoritePlaylist Boolean        @default(false)
  items              PlaylistItem[]
  queueItems         QueueItem[]    @ignore
  PlayHistory        PlayHistory[]

  @@unique([creatorId, title])
}

model PlaylistItem {
  id         String   @id @default(cuid()) @map("_id")
  addedAt    DateTime @default(now())
  song       Song     @relation(fields: [songId], references: [id])
  songId     String
  nextId     String?
  prevId     String?
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playlistId String
}

model Song {
  id            String         @id @default(cuid()) @map("_id")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String?
  artists       Artist[]       @relation(references: [id], fields: [artistIds])
  artistIds     String[]       @default([])
  albumCover    String?
  duration      Float
  url           String
  uploader      User           @relation(name: "uploadedSongs", fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploaderId    String
  playlists     PlaylistItem[] @ignore
  queueItems    QueueItem[]    @ignore
  deletedAt     DateTime?
  playhistories PlayHistory[]
  genres        Genre[]        @relation(references: [id], fields: [genreIds])
  genreIds      String[]       @default([])
}

model Genre {
  id      String   @id @default(cuid()) @map("_id")
  name    String   @unique
  songs   Song[]   @relation(references: [id], fields: [songIds])
  songIds String[] @default([])
}

model Artist {
  id          String   @id @default(cuid()) @map("_id")
  name        String   @unique
  songs       Song[]   @relation(references: [id], fields: [songIds])
  songIds     String[] @default([])
  image       String?
  background  String?
  description String   @default("")
  playHistory PlayHistory[]
}

enum RepeatMode {
  NONE
  ONE
  ALL
}

model Queue {
  id                 String      @id @default(cuid()) @map("_id")
  shuffle            Boolean     @default(false)
  repeatMode         RepeatMode  @default(NONE)
  items              QueueItem[]
  currentlyPlayingId String?
}

model QueueItem {
  id             String    @id @default(cuid()) @map("_id")
  song           Song      @relation(fields: [songId], references: [id])
  songId         String
  nextId         String?
  prevId         String?
  shuffledNextId String?
  shuffledPrevId String?
  queue          Queue     @relation(fields: [queueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queueId        String
  playlistId     String?
  playlist       Playlist? @relation(fields: [playlistId], references: [id], onDelete: SetNull)
}

model SearchHistory {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  query     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}

model PlayHistory {
  id         String    @id @default(cuid()) @map("_id")
  createdAt  DateTime  @default(now())
  song       Song      @relation(fields: [songId], references: [id])
  songId     String
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?
  user       User      @relation(fields: [userId], references: [id])
  userId     String
  artist     Artist?   @relation(fields: [artistId], references: [id])
  artistId   String?
}
