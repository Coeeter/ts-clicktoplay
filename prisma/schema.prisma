// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String              @id @default(cuid()) @map("_id")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  email                 String              @unique
  name                  String?
  image                 String?
  uploadedSongs         Song[]              @relation("uploadedSongs")
  playlists             Playlist[]
  playHistories         PlayHistory[]
  searchHistory         SearchHistory[]
  accounts              Account[]
  sessions              Session[]
  verificationTokens    VerificationToken[]
  emailVerified         DateTime?           @map("emailVerified")
  currentlyPlayingQueue Queue?
}

model Playlist {
  id            String        @id @default(cuid()) @map("_id")
  createdAt     DateTime      @default(now())
  title         String
  creator       User          @relation(fields: [creatorId], references: [id])
  creatorId     String        @map("userId")
  playHistories PlayHistory[]
  queues        Queue[]
  head          PlaylistItem? @relation(fields: [headId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  headId        String?       @unique @map("headId")
}

model PlaylistItem {
  id                String         @id @default(cuid()) @map("_id")
  addedAt           DateTime       @default(now())
  song              Song           @relation(fields: [songId], references: [id])
  songId            String         @map("songId")
  next              PlaylistItem?  @relation("nextPlaylistItems", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextId            String?        @map("nextId")
  prev              PlaylistItem?  @relation("prevPlaylistItems", fields: [prevId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevId            String?        @map("prevId")
  nextPlaylistItems PlaylistItem[] @relation("nextPlaylistItems")
  prevPlaylistItems PlaylistItem[] @relation("prevPlaylistItems")
  playlist          Playlist?
}

model Song {
  id            String         @id @default(cuid()) @map("_id")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String?
  albumCover    String?
  duration      Float
  url           String
  uploader      User           @relation(name: "uploadedSongs", fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploaderId    String         @map("uploaderId")
  playlists     PlaylistItem[]
  playHistories PlayHistory[]
  queueItems    QueueItem[]
  deletedAt     DateTime?      @map("deletedAt")
}

enum RepeatMode {
  NONE
  ONE
  ALL
}

model Queue {
  id            String     @id @default(cuid()) @map("_id")
  search        String?
  playlist      Playlist?  @relation(fields: [playlistId], references: [id])
  playlistId    String?    @map("playlistId")
  playingUser   User?      @relation(fields: [playingUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playingUserId String?    @map("playingUserId")
  shuffle       Boolean    @default(false)
  repeatMode    RepeatMode @default(NONE)
  currentSong   QueueItem? @relation(fields: [currentSongId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  currentSongId String?    @map("currentSongId")

  @@unique([playingUserId])
}

model QueueItem {
  id             String      @id @default(cuid()) @map("_id")
  song           Song        @relation(fields: [songId], references: [id])
  songId         String      @map("songId")
  next           QueueItem?  @relation("nextQueueItems", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextId         String?     @map("nextId")
  prev           QueueItem?  @relation("prevQueueItems", fields: [prevId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevId         String?     @map("prevId")
  nextQueueItems QueueItem[] @relation("nextQueueItems")
  prevQueueItems QueueItem[] @relation("prevQueueItems")
  Queue          Queue[]
}

model PlayHistory {
  id         String    @id @default(cuid()) @map("_id")
  playedAt   DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("userId")
  song       Song      @relation(fields: [songId], references: [id])
  songId     String    @map("songId")
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?   @map("playlistId")
}

model SearchHistory {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  query     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId")
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}
