// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid()) @map("_id")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  email              String              @unique
  name               String
  image              String?
  uploadedSongs      Song[]
  playlists          Playlist[]
  playHistories      PlayHistory[]
  searchHistory      SearchHistory[]
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  emailVerified      DateTime?           @map("emailVerified")
}

model Playlist {
  id            String         @id @default(cuid()) @map("_id")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String         @map("userId")
  songs         PlaylistSong[]
  playHistories PlayHistory[]
  Queue         Queue[]
}

model PlaylistSong {
  id         String   @id @default(cuid()) @map("_id")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  position   Int
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String   @map("playlistId")
  song       Song     @relation(fields: [songId], references: [id])
  songId     String   @map("songId")
}

model Song {
  id            String         @id @default(cuid()) @map("_id")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String?
  albumCover    String?
  duration      Float
  url           String
  uploader      User           @relation(fields: [uploaderId], references: [id])
  uploaderId    String         @map("uploaderId")
  playlists     PlaylistSong[]
  playHistories PlayHistory[]
  Queue         Queue[]
}

model Queue {
  id         String    @id @default(cuid()) @map("_id")
  position   Int
  search     String?
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?   @map("playlistId")
  song       Song      @relation(fields: [songId], references: [id])
  songId     String    @map("songId")

  @@unique([playlistId, songId, position])
}

model PlayHistory {
  id         String    @id @default(cuid()) @map("_id")
  playedAt   DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("userId")
  song       Song      @relation(fields: [songId], references: [id])
  songId     String    @map("songId")
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?   @map("playlistId")
}

model SearchHistory {
  id        String   @id @default(cuid()) @map("_id")
  createdAt DateTime @default(now())
  query     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId")
}

model Account {
  id                String   @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id")
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?

  @@unique([identifier, token])
}
