// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  email              String              @unique
  name               String?
  image              String?
  uploadedSongs      Song[]              @relation("uploadedSongs")
  playlists          Playlist[]
  playHistories      PlayHistory[]
  searchHistory      SearchHistory[]
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  emailVerified      DateTime?           @map("emailVerified")
  library            Library?            @relation("library")
}

model Playlist {
  id            String         @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  title         String
  creator       User           @relation(fields: [creatorId], references: [id])
  creatorId     String         @map("userId") @db.ObjectId
  playHistories PlayHistory[]
  queues        Queue[]
  items         PlaylistItem[]
  libraries     LibraryItem[]  @ignore
}

model PlaylistItem {
  id                String         @id @default(cuid()) @map("_id") @db.ObjectId
  addedAt           DateTime       @default(now())
  song              Song           @relation(fields: [songId], references: [id])
  songId            String         @map("songId") @db.ObjectId
  next              PlaylistItem?  @relation("nextPlaylistItems", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextId            String?        @map("nextId") @db.ObjectId
  prev              PlaylistItem?  @relation("prevPlaylistItems", fields: [prevId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevId            String?        @map("prevId") @db.ObjectId
  nextPlaylistItems PlaylistItem[] @relation("nextPlaylistItems") @ignore
  prevPlaylistItems PlaylistItem[] @relation("prevPlaylistItems") @ignore
  playlist          Playlist       @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playlistId        String         @map("playlistId") @db.ObjectId
}

model Song {
  id            String         @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  title         String
  artist        String?
  albumCover    String?
  duration      Float
  url           String
  uploader      User           @relation(name: "uploadedSongs", fields: [uploaderId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  uploaderId    String         @map("uploaderId") @db.ObjectId
  playlists     PlaylistItem[] @ignore
  playHistories PlayHistory[]  @ignore
  queueItems    QueueItem[]    @ignore
  deletedAt     DateTime?      @map("deletedAt")
}

enum RepeatMode {
  NONE
  ONE
  ALL
}

model Queue {
  id                 String      @id @default(cuid()) @map("_id") @db.ObjectId
  search             String?
  playlist           Playlist?   @relation(fields: [playlistId], references: [id])
  playlistId         String?     @map("playlistId") @db.ObjectId
  shuffle            Boolean     @default(false)
  repeatMode         RepeatMode  @default(NONE)
  items              QueueItem[]
  currentlyPlayingId String?     @db.ObjectId
  currentlyPlaying   QueueItem?  @relation("currentlyPlayingQueue", fields: [currentlyPlayingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model QueueItem {
  id                    String      @id @default(cuid()) @map("_id") @db.ObjectId
  song                  Song        @relation(fields: [songId], references: [id])
  songId                String      @map("songId") @db.ObjectId
  next                  QueueItem?  @relation("nextQueueItems", fields: [nextId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextId                String?     @map("nextId") @db.ObjectId
  prev                  QueueItem?  @relation("prevQueueItems", fields: [prevId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  prevId                String?     @map("prevId") @db.ObjectId
  nextQueueItems        QueueItem[] @relation("nextQueueItems") @ignore
  prevQueueItems        QueueItem[] @relation("prevQueueItems") @ignore
  queue                 Queue       @relation(fields: [queueId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  queueId               String      @map("queueId") @db.ObjectId
  currentlyPlayedQueues Queue[]     @relation("currentlyPlayingQueue") @ignore
}

model PlayHistory {
  id         String    @id @default(cuid()) @map("_id") @db.ObjectId
  playedAt   DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("userId") @db.ObjectId
  song       Song      @relation(fields: [songId], references: [id])
  songId     String    @map("songId") @db.ObjectId
  playlist   Playlist? @relation(fields: [playlistId], references: [id])
  playlistId String?   @map("playlistId") @db.ObjectId
}

model Library {
  id        String        @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now())
  user      User          @relation("library", fields: [userId], references: [id])
  userId    String        @unique @db.ObjectId
  items     LibraryItem[]
}

model LibraryItem {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  library    Library  @relation(fields: [libraryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  libraryId  String   @db.ObjectId
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  playlistId String   @db.ObjectId
}

model SearchHistory {
  id        String   @id @default(cuid()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  query     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @map("userId") @db.ObjectId
}

model Account {
  id                String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id") @db.ObjectId
  userId       String?  @map("user_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(cuid()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId

  @@unique([identifier, token])
}
